{"version":3,"sources":["ui/helpers/constantes/index.tsx","ui/components/templates/styles.ts","ui/components/atoms/Title/styles.ts","ui/components/atoms/Title/index.tsx","ui/components/atoms/GoToGitHub/styles.ts","ui/components/atoms/GoToGitHub/index.tsx","ui/components/molecules/Board/styles.ts","ui/components/molecules/Board/index.tsx","ui/components/organisms/GameDialog/styles.ts","ui/components/organisms/GameDialog/index.tsx","ui/components/templates/Hash.tsx","index.tsx"],"names":["ImageGlobal","VsComputer","process","MultiPlayers","Start","Replay","GoHome","GoToGitHub","boardDefault","GameContianer","styled","section","TitleStyle","h1","Title","nameGame","RotateIconGit","keyframes","GoToGitHubStyle","button","LinkToGitHub","a","ImgGit","img","TextGitHub","p","href","target","rel","src","alt","BoardStyle","ul","PlayerArea","li","props","border","css","hover","Board","boardCurrent","onClick","map","player","index","Background","div","open","ContainerGameDialog","dialog","TitleModal","h2","DescriptionModal","MessageWinner","DescriptionEndGame","winner","ContainerBtnsGameOver","BtnStart","BtnVsComputer","adversary","BtnMultiPlayers","BtnReplay","BtnGoHome","GameDialog","game","startGame","goHome","selectComputer","selectMultiPlayers","statusGame","type","disabled","Hash","board","setInitialBoard","turningBoardIntoArray","Array","fill","split","useState","setBoardCurrent","setGame","historyNavigate","useNavigate","queryUrlParameter","search","useLocation","useMemo","URLSearchParams","LocationSearch","urlParameter","get","useEffect","length","test","alert","toUpperCase","computerMovementAndEndOfTheGame","useCallback","every","playerArea","validDraw","endOfTheGame","forEach","playerAreas","emptySeatsOnBoard","idx","indexOf","push","computerRandomPosition","Math","floor","random","newBoard","slice","pathname","window","location","encodeURIComponent","join","area","React","memo","App","initialBoard","path","element","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5f3da89a.chunk.js","sourcesContent":["\nexport const endOfTheGame = (board: any[]) => {\n    const endGame = [\n        [board[0], board[1], board[2]],\n        [board[0], board[3], board[6]],\n        [board[0], board[4], board[8]],\n        [board[1], board[4], board[7]],\n        [board[2], board[5], board[8]],\n        [board[2], board[4], board[6]],\n        [board[3], board[4], board[5]],\n        [board[6], board[7], board[8]],\n    ];\n    return endGame\n}\n\nexport const ImageGlobal = {\n    VsComputer: `${process.env.PUBLIC_URL}/img/png/vsComputer.png`,\n    MultiPlayers: `${process.env.PUBLIC_URL}/img/png/multiPlayers.png`,\n    Start: `${process.env.PUBLIC_URL}/img/png/start.png`,\n    Replay: `${process.env.PUBLIC_URL}/img/png/replay.png`,\n    GoHome: `${process.env.PUBLIC_URL}/img/png/goHome.png`,\n    GoToGitHub: `${process.env.PUBLIC_URL}/img/png/go-to-GitHub.png`,\n}\n\nexport const boardDefault = \"         \";\n","import styled from \"styled-components\";\n\nexport const GameContianer = styled.section`\n  height: auto;\n  border-radius: 5px;\n  font-size: 2rem;\n  font-weight: bold;\n  color: #00000077;\n\n  border: 1px solid;\n  background-color: #FFFFFF;\n  padding: 15px;\n\n  @media (max-width: 400px) {\n    width: 95%;\n    margin: auto;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const TitleStyle = styled.h1`\n  text-align: center;\n  font-size: 3rem;\n  color: #555;\n  padding: 2rem;\n\n  @media (max-width: 400px) {\n  padding: 1rem 0.5rem;\n  }\n`;\n","import React from 'react';\nimport * as S from './styles';\nimport { TypesTitle } from '../../../helpers/types'\n\n\nconst Title: React.FC<TypesTitle> = ({ nameGame }) => (\n    <S.TitleStyle>\n        {nameGame}\n    </S.TitleStyle>\n);\n\nexport default Title;\n","import styled from \"styled-components\";\nimport { keyframes } from \"styled-components\";\n\nconst RotateIconGit = keyframes`\n 0% { transform: rotate(40deg) }\n 10% {  transform: rotate(347deg) }\n 20% {   transform: rotate(17deg) }\n 30% {   transform: rotate(-60deg)) }\n 40% {  transform: rotate(40deg)  }\n 60% {   transform: rotate(-70deg) }\n 80% {   transform: rotate(50deg) }\n 100% {  transform: rotate(-60deg) } \n`;\n\nexport const GoToGitHubStyle = styled.button`\n  background: #929eaa;\n  border-radius: 50%;\n  height: 65px;\n  width: 65px;\n  position: absolute;\n  bottom: 50px;\n    right: 15px;\n  cursor: pointer;\n  font-family: Segoe UI italic;\n  font-style: normal;\n  font-weight: bold;\n  color: #555;\n  font-size: 17px;\n\n  :hover {\n    background-color: #b1b6bb;\n  }\n  :active {\n    opacity: 0.7;\n  }\n`;\n\nexport const LinkToGitHub = styled.a`\n  text-decoration: none;\n  color: black;\n`;\n\nexport const ImgGit = styled.img`\n  height: 50px;\n  width: 50px;\n  transform: rotate(-20deg);\n  animation-name: ${RotateIconGit};\n  animation-duration: 2.5s;\n  animation-iteration-count: infinite;\n  margin-top: 3px;\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nexport const TextGitHub = styled.p`\n  width: 60px;\n  text-align: center;\n  position: relative;\n  right: 10px;\n  font-weight: bold;\n  top: 8px;\n`;","import React from \"react\";\nimport * as S from \"./styles\";\nimport { ImageGlobal } from '../../../helpers/constantes/index';\n\ninterface GoToGitHubProps {\n  props?: string;\n}\n\nconst GoToGitHub: React.FC<GoToGitHubProps> = () => {\n  return (\n      <S.LinkToGitHub href=\"https://github.com/J0se-Luiz/react-hash\" target=\"_blank\" rel=\"noopener\">\n    <S.GoToGitHubStyle>\n        <S.ImgGit\n          src={ImageGlobal.GoToGitHub}\n          alt=\"Go to GitHub\"\n        />\n        <S.TextGitHub>Go to GitHub</S.TextGitHub>\n    </S.GoToGitHubStyle>\n      </S.LinkToGitHub>\n  );\n};\n\nexport default GoToGitHub;","import styled, { css } from \"styled-components\";\nimport { typesPlayerAresStyle } from '../../../helpers/types'\n\nexport const BoardStyle = styled.ul`\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, 100px);\n  grid-template-rows: repeat(3, 100px);\n\n  @media (max-width: 400px) {\n    grid-template-columns: repeat(3, 80px);\n    grid-template-rows: repeat(3, 80px);\n  }\n`;\n\nexport const PlayerArea = styled.li<typesPlayerAresStyle>`\n  background-color: #ffffff;\n  display: grid;\n  align-items: center;\n  justify-content: center;\n  font-size: 3rem;\n  font-weight: bold;\n  color: #00000060;\n  border: 3px solid;\n\n  cursor: pointer;\n\n  ${(props) => {\n    if (props.border === 0)\n      return css`\n        border-top: none;\n        border-left: none;\n      `;\n    if (props.border === 1)\n      return css`\n        border-top: none;\n      `;\n    if (props.border === 2)\n      return css`\n        border-top: none;\n        border-right: none;\n      `;\n    if (props.border === 3)\n      return css`\n        border-left: none;\n      `;\n    if (props.border === 5)\n      return css`\n        border-right: none;\n      `;\n    if (props.border === 6)\n      return css`\n        border-left: none;\n        border-bottom: none;\n      `;\n    if (props.border === 7)\n      return css`\n        border-bottom: none;\n      `;\n    if (props.border === 8)\n      return css`\n        border-right: none;\n        border-bottom: none;\n      `;\n  }};\n\n  ${(props) => {\n    if (props.hover === \" \")\n      return css`\n        :hover {\n          border: 4px solid;\n          box-shadow: 2px 5px 23px 7px rgba(0, 0, 0, 0.3);\n          transition: all 0.2s ease-in-out;\n          transform: scale(1.1);\n          background-color: rgba(248, 248, 255);\n        }\n      `;\n  }};\n`;\n","import React from 'react';\nimport * as S from './styles';\nimport { TypesBoard } from '../../../helpers/types'\n\nconst Board: React.FC<TypesBoard> = ({ boardCurrent, onClick }) => (\n  <S.BoardStyle>\n    {boardCurrent?.map((player: string, index: number) => (\n      <S.PlayerArea\n        key={index}\n        border={index}\n        hover={player}\n        onClick={() => onClick(index)}\n      >\n        {player}\n      </S.PlayerArea>\n    ))}\n  </S.BoardStyle>\n);\n\nexport default Board;\n","import styled from \"styled-components\";\nimport { ImageGlobal } from \"../../../helpers/constantes\";\nimport { OpenDialogTypeStyle, PlayerWinnerStyle } from \"../../../helpers/types\";\n\nexport const Background = styled.div<OpenDialogTypeStyle>`\n  display: ${(props) => (props.open ? \"flex\" : \"none\")};\n\n  ::before {\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    content: \" \";\n    position: fixed;\n    background: rgba(0, 0, 0, 0.5);\n\n    z-index: 100;\n  }\n`;\n\nexport const ContainerGameDialog = styled.dialog`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  position: fixed;\n  top: 17vh;\n  box-sizing: border-box;\n  z-index: 100;\n  margin: 0 auto;\n  background-color: #ffffff;\n  padding: 30px 10px;\n\n  @media (max-width: 500px) {\n    width: 90%;\n  }\n`;\n\nexport const TitleModal = styled.h2`\n  margin: 1rem;\n  font-size: 3rem;\n  font-weight: bold;\n  color: #00000077;\n`;\n\nexport const DescriptionModal = styled(TitleModal)`\n  font-size: 1.6rem;\n  color: #00000070;\n`;\n\nexport const MessageWinner = styled(TitleModal)`\n  opacity: 0.7;\n\n  margin-bottom: 3rem;\n`;\n\nexport const DescriptionEndGame = styled.p<PlayerWinnerStyle>`\n  color: ${(props) => (props.winner === \"X\" ? \"red\" : \"blue\")};\n`;\n\nexport const ContainerBtnsGameOver = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-evenly;\n`;\n\nexport const BtnStart = styled.button`\n  cursor: pointer;\n  height: 77px;\n  width: 77px;\n  background-image: url(${ImageGlobal.Start});\n  background-repeat: no-repeat;\n  background-position: center;\n  border: none;\n  background-color: transparent;\n  box-shadow: none;\n\n  @media (max-width: 1024px) {\n    font-size: 0.8rem;\n    border-width: 3px;\n    padding: 4px 8px;\n  }\n  &:active {\n    opacity: 0.2;\n    cursor: wait;\n  }\n\n  &:hover {\n    border: \"1px solid #00000055\";\n    transform: scale(1.2);\n  }\n\n  &:disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n    border: \"1px solid #00000055\";\n    transform: scale(1.2);\n  }\n\n \n`;\n\nexport const BtnVsComputer = styled(BtnStart)<PlayerWinnerStyle>`\n  border: ${(props) =>\n    props.adversary === \"computer\" ? \"1px solid #00000055\" : \" \"};\n  transform: scale(${(props) => (props.adversary === \"computer\" ? 1.2 : 1)});\n  opacity: ${(props) => (props.adversary === \"computer\" ? 0.3 : \" \")};\n\n  transition: all 0.2s ease-in-out;\n  height: 80px;\n  width: 85px;\n  background-image: url(${ImageGlobal.VsComputer});\n`;\n\nexport const BtnMultiPlayers = styled(BtnStart)<PlayerWinnerStyle>`\n  border: ${(props) =>\n    props.adversary === \"multiPlayers\" ? \" 1px solid #00000055\" : \" \"};\n  transform: scale(\n    ${(props) => (props.adversary === \"multiPlayers\" ? 1.2 : 1)}\n  );\n  opacity: ${(props) => (props.adversary === \"multiPlayers\" ? 0.3 : \" \")};\n\n  transition: all 0.2s ease-in-out;\n  height: 80px;\n  width: 85px;\n  background-image: url(${ImageGlobal.MultiPlayers});\n`;\n\nexport const BtnReplay = styled(BtnStart)`\n  height: 71px;\n  width: 72px;\n  background-image: url(${ImageGlobal.Replay});\n`;\n\nexport const BtnGoHome = styled(BtnStart)`\n  height: 71px;\n  width: 72px;\n  background-image: url(${ImageGlobal.GoHome});\n`;\n","import React from \"react\";\nimport * as S from \"./styles\";\nimport { typesGameDialog } from '../../../helpers/types'\n\nconst GameDialog: React.FC<typesGameDialog> = ({ game, startGame, goHome, selectComputer, selectMultiPlayers }) => {\n\n  return (\n    <S.Background open={game?.winner || game?.statusGame} >\n      <S.ContainerGameDialog>\n        {game?.statusGame === \"Home\" && (\n          <>\n            <S.TitleModal>Hello let's play?</S.TitleModal>\n            <S.DescriptionModal> choose game mode and press start </S.DescriptionModal>\n\n            <S.ContainerBtnsGameOver >\n              <S.BtnVsComputer aria-label=\"Button selectComputer\" type=\"button\" onClick={selectComputer} adversary={game.adversary} />\n              <S.BtnMultiPlayers aria-label=\"Button selectMultiPlayers\" type=\"button\" onClick={selectMultiPlayers} adversary={game.adversary} />\n            </S.ContainerBtnsGameOver>\n\n            <S.BtnStart aria-label=\"Button StartGame\" disabled={!game.adversary} type=\"button\" onClick={startGame} />\n          </>)}\n\n\n        {game?.statusGame === \"GameOver\" && (\n          <>\n            <S.TitleModal>End of the game</S.TitleModal>\n\n            {game?.winner === \"draw\" ? (\n              <S.MessageWinner >\n                Draw!\n              </S.MessageWinner>\n            ) : (\n              <S.MessageWinner >\n                <S.DescriptionEndGame winner={game?.winner}>{game?.winner}</S.DescriptionEndGame>\n                is the winner!\n              </S.MessageWinner>\n            )}\n            <S.ContainerBtnsGameOver >\n              <S.BtnReplay aria-label=\"Button Replay\" type=\"button\" onClick={startGame} />\n              <S.BtnGoHome aria-label=\"Button GoHome\" type=\"button\" onClick={goHome} />\n            </S.ContainerBtnsGameOver>\n          </>)}\n\n      </S.ContainerGameDialog>\n    </S.Background>\n  );\n};\n\nexport default GameDialog;","\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport * as S from './styles'\nimport { endOfTheGame, boardDefault } from '../../helpers/constantes';\nimport { TypesGame, TypesHash } from '../../helpers/types';\nimport Title from \"../atoms/Title\";\nimport GoToGitHub from '../atoms/GoToGitHub';\nimport Board from '../molecules/Board';\nimport GameDialog from '../organisms/GameDialog';\n\nconst Hash: React.FC<TypesHash> = ({ board, setInitialBoard }) => {\n\n  const turningBoardIntoArray = Array(1).fill(board.split(\"\"));\n  const [boardCurrent, setBoardCurrent] = useState(turningBoardIntoArray[0]);\n  const [game, setGame] = useState<TypesGame>({\n    player: \"X\",\n    statusGame: \"Home\",\n    adversary: null,\n    winner: null,\n  });\n  const historyNavigate = useNavigate();\n\n  const LocationSearch = () => {\n    const { search } = useLocation();\n    return useMemo(() => new URLSearchParams(search), [search]);\n  };\n\n  const queryUrlParameter = LocationSearch();\n  const urlParameter = queryUrlParameter.get(\"board\");\n\n  useEffect(() => {\n\n    if (urlParameter) {\n      if (urlParameter.length !== 9 || !(/^[O-Xo-x ]+$/i.test(urlParameter))) {\n        alert(\"Something wrong is not right! hehe\");\n        setGame({ ...game, player: \"X\", winner: null });\n        return setInitialBoard(boardDefault);\n      };\n\n      setInitialBoard(urlParameter?.toUpperCase());\n    };\n\n    if (!queryUrlParameter.get(\"board\")) {\n      setInitialBoard(boardDefault);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [urlParameter]);\n\n  const fillTheAreaWithThePlayer = (index: number) => {\n    if (boardCurrent[index] !== \" \") return null;\n    if (game.winner) return null;\n\n    setBoardCurrent(\n      boardCurrent.map((playerArea: string, area: number) => (area === index ? game.player : playerArea))\n    );\n\n    return setGame({ ...game, player: game?.player === \"X\" ? \"O\" : \"X\" });\n  };\n\n  const validWinner = () => {\n    endOfTheGame(boardCurrent).forEach((playerAreas) => {\n      if (playerAreas.every((playerArea) => playerArea === \"O\"))\n        return setGame({ ...game, winner: \"O\", statusGame: \"GameOver\" });\n\n      if (playerAreas.every((playerArea) => playerArea === \"X\"))\n        return setGame({ ...game, winner: \"X\", statusGame: \"GameOver\" });\n    });\n  };\n\n  const validDraw = () => {\n    if (boardCurrent?.every((playerArea: string) => playerArea !== \" \"))\n      return setGame({ ...game, winner: \"draw\", statusGame: \"GameOver\" });\n  };\n  \n  const computerMovementAndEndOfTheGame = useCallback(() => {\n    validDraw();\n    validWinner();\n\n    if (game?.adversary === \"computer\") {\n      if (game.player === \"O\") {\n        let emptySeatsOnBoard = [];\n        let idx = boardCurrent.indexOf(\" \");\n\n        while (idx !== -1) {\n          emptySeatsOnBoard.push(idx);\n          idx = boardCurrent.indexOf(\" \", idx + 1);\n        };\n\n        const computerRandomPosition = Math.floor(\n          Math.random() * emptySeatsOnBoard?.length\n        );\n\n        let newBoard = boardCurrent.slice();\n        newBoard[emptySeatsOnBoard[computerRandomPosition]] = \"O\";\n\n        setBoardCurrent(newBoard);\n\n        return setGame({ ...game, player: \"X\" });\n      };\n    };\n\n    historyNavigate({\n      pathname: window.location.pathname,\n      search: `?board=${encodeURIComponent(boardCurrent.join(\"\"))}`,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardCurrent]);\n\n  useEffect(() => {\n\n    if (!game.statusGame) {\n      computerMovementAndEndOfTheGame();\n    };\n\n    if (game.winner) {\n      historyNavigate({\n        pathname: window.location.pathname,\n        search: ``,\n      });\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game.statusGame, computerMovementAndEndOfTheGame]);\n\n  const startGame = () => {\n    setBoardCurrent(turningBoardIntoArray[0]);\n    setGame({ ...game, player: \"X\", winner: null, statusGame: null });\n  };\n\n  const goHome = () => {\n    setGame({ ...game, statusGame: \"Home\", adversary: null });\n  };\n\n  return (\n    <S.GameContianer>\n      <Title nameGame=\"Hash Game\" />\n\n      <Board boardCurrent={boardCurrent} onClick={fillTheAreaWithThePlayer} />\n\n      <GameDialog\n        game={game}\n        startGame={startGame}\n        goHome={goHome}\n        selectComputer={() => setGame({ ...game, adversary: \"computer\" })}\n        selectMultiPlayers={() => setGame({ ...game, adversary: \"multiPlayers\" })}\n         />\n\n      <GoToGitHub />\n    </S.GameContianer>\n  );\n}\n\nexport default React.memo(Hash);\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport './ui/helpers/globalStyle/globalStyle.css';\nimport { boardDefault } from \"./ui/helpers/constantes\";\nimport Hash from './ui/components/templates/Hash';\n\nconst App = () => {\n  const [initialBoard, setInitialBoard] = useState(boardDefault);\n\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Hash board={initialBoard} setInitialBoard={setInitialBoard} />} />\n        <Route path={`/react-hash/`} element={<Hash board={initialBoard} setInitialBoard={setInitialBoard} />} />\n        {/*rota /react-hash/ foi definida por causa do git, onde o projeto ta hospedado! */}\n        <Route path='*' element={<h1>URL NAO EXISTE!</h1>} />\n      </Routes>\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}