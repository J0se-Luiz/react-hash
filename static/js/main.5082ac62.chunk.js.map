{"version":3,"sources":["ui/helpers/constantes/index.tsx","ui/components/templates/styles.ts","ui/components/atoms/Title/styles.ts","ui/components/atoms/Title/index.tsx","ui/components/atoms/GoToGitHub/styles.ts","ui/components/atoms/GoToGitHub/index.tsx","ui/components/molecules/Board/styles.ts","ui/components/molecules/Board/index.tsx","ui/components/organisms/GameDialog/styles.ts","ui/components/organisms/GameDialog/index.tsx","ui/components/templates/Hash.tsx","index.tsx"],"names":["boardDefault","onlyGameCharacters","gameCharacters","ImageGlobal","GoToGitHub","process","VsComputer","VsComputerNotDescription","MultiPlayers","MultiPlayersNotDescription","Start","StartNotDescription","Replay","GoHome","GoHomeNotDescription","GameContianer","styled","section","TitleStyle","h1","Title","nameGame","RotateIconGit","keyframes","GoToGitHubStyle","button","LinkToGitHub","a","ImgGit","img","TextGitHub","p","href","target","rel","src","alt","BoardStyle","ul","PlayerArea","li","props","border","css","hover","Board","boardCurrent","onClick","map","player","index","animationDraw","animationWinnerCoin","animationWinnerTrophy","Background","div","open","ContainerGameDialog","dialog","TitleModal","DescriptionModal","MessageWinner","DrawPlayerAnimation","WinnerCoinAnimation","WinnerTrophyAnimation","DescriptionEndGame","winner","ContainerBtns","IconButton","GapIcons","BtnStart","BtnVsComputer","adversary","BtnMultiPlayers","BtnReplay","BtnGoHome","GameDialog","game","startGame","goHome","selectComputer","selectMultiPlayers","statusGame","className","type","disabled","Hash","board","setInitialBoard","turningBoardIntoArray","Array","fill","split","useState","setBoardCurrent","setGame","historyNavigate","useNavigate","clearHistoryNavigate","pathname","window","location","search","queryUrlParameter","useLocation","useMemo","URLSearchParams","LocationSearch","urlParameter","get","howManyCharactersX","match","length","howManyCharactersO","useEffect","alert","test","toUpperCase","computerMovementAndEndOfTheGame","useCallback","every","playerArea","validDraw","endOfTheGame","forEach","playerAreas","emptySeatsOnBoard","idx","indexOf","push","computerRandomPosition","Math","floor","random","newBoard","slice","encodeURIComponent","join","area","React","memo","App","initialBoard","path","element","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.5082ac62.chunk.js","sourcesContent":["\nexport const boardDefault = \"         \";\n\nexport const onlyGameCharacters = /[^o x]/ig;\n\nexport const gameCharacters = {\n    X: /x/ig,\n    O: /o/ig\n};\n\nexport const endOfTheGame = (board: Array<string | []>) => {\n    const endGame = [\n        [board[0], board[1], board[2]],\n        [board[0], board[3], board[6]],\n        [board[0], board[4], board[8]],\n        [board[1], board[4], board[7]],\n        [board[2], board[5], board[8]],\n        [board[2], board[4], board[6]],\n        [board[3], board[4], board[5]],\n        [board[6], board[7], board[8]],\n    ];\n    return endGame\n};\n\nexport const ImageGlobal = {\n    GoToGitHub: `${process.env.PUBLIC_URL}/img/png/go-to-GitHub.png`,\n    VsComputer: `${process.env.PUBLIC_URL}/img/png/vsComputer.png`,\n    VsComputerNotDescription: `${process.env.PUBLIC_URL}/img/png/vsComputerNotDescription.png`,\n    MultiPlayers: `${process.env.PUBLIC_URL}/img/png/multiPlayers.png`,\n    MultiPlayersNotDescription: `${process.env.PUBLIC_URL}/img/png/multiPlayersNotDescription.png`,\n    Start: `${process.env.PUBLIC_URL}/img/png/start.png`,\n    StartNotDescription: `${process.env.PUBLIC_URL}/img/png/startNoDescription.png`,\n    Replay: `${process.env.PUBLIC_URL}/img/png/replay.png`,\n    GoHome: `${process.env.PUBLIC_URL}/img/png/goHome.png`,\n    GoHomeNotDescription: `${process.env.PUBLIC_URL}/img/png/goHomeNotDescription.png`,\n};\n","import styled from \"styled-components\";\n\nexport const GameContianer = styled.section`\n  height: auto;\n  border-radius: 5px;\n  font-weight: bold;\n  color: #00000077;\n  border: 1px solid;\n  background-color: #FFFFFF;\n  padding: 15px;\n  max-width: 340px;\n\n  @media (max-width: 400px) {\n    width: 95%;\n    margin: auto;\n  }\n`;\n","import styled from \"styled-components\";\n\nexport const TitleStyle = styled.h1`\n  text-align: center;\n  font-size: 25px;\n  color: #00000077;\n  padding: 20px;\n\n  @media (max-width: 400px) {\n  padding: 1rem 0.5rem;\n  }\n`;\n","import React from 'react';\nimport * as S from './styles';\nimport { TypesTitle } from '../../../helpers/types'\n\n\nconst Title: React.FC<TypesTitle> = ({ nameGame }) => (\n    <S.TitleStyle>\n        {nameGame}\n    </S.TitleStyle>\n);\n\nexport default Title;\n","import styled from \"styled-components\";\nimport { keyframes } from \"styled-components\";\n\nconst RotateIconGit = keyframes`\n 0% { transform: rotate(40deg) }\n 10% {  transform: rotate(347deg) }\n 20% {   transform: rotate(17deg) }\n 30% {   transform: rotate(-60deg)) }\n 40% {  transform: rotate(40deg)  }\n 60% {   transform: rotate(-70deg) }\n 80% {   transform: rotate(50deg) }\n 100% {  transform: rotate(-60deg) } \n`;\n\nexport const GoToGitHubStyle = styled.button`\n  background: #929eaa;\n  border-radius: 50%;\n  height: 65px;\n  width: 65px;\n  position: absolute;\n  bottom: 50px;\n    right: 15px;\n  cursor: pointer;\n  /* font-family: Segoe UI italic; */\n  font-style: normal;\n  font-weight: bold;\n  color: #555;\n  font-size: 11px;\n\n  :hover {\n    background-color: #b1b6bb;\n  }\n  :active {\n    opacity: 0.7;\n  }\n`;\n\nexport const LinkToGitHub = styled.a`\n  text-decoration: none;\n  color: black;\n`;\n\nexport const ImgGit = styled.img`\n  height: 50px;\n  width: 50px;\n  transform: rotate(-20deg);\n  animation-name: ${RotateIconGit};\n  animation-duration: 2.5s;\n  animation-iteration-count: infinite;\n  margin-top: 3px;\n  :hover {\n    opacity: 0.7;\n  }\n`;\n\nexport const TextGitHub = styled.p`\n  width: 60px;\n  text-align: center;\n  position: relative;\n  right: 10px;\n  font-weight: bold;\n  top: 10px;\n\n\n  line-height: 15px; // prod\n`;","import React from \"react\";\nimport * as S from \"./styles\";\nimport { ImageGlobal } from '../../../helpers/constantes/index';\n\ninterface GoToGitHubProps {\n  props?: string;\n}\n\nconst GoToGitHub: React.FC<GoToGitHubProps> = () => {\n  return (\n      <S.LinkToGitHub href=\"https://github.com/J0se-Luiz/react-hash\" target=\"_blank\" rel=\"noopener\">\n    <S.GoToGitHubStyle>\n        <S.ImgGit\n          src={ImageGlobal.GoToGitHub}\n          alt=\"Go to GitHub\"\n        />\n        <S.TextGitHub>Go to GitHub</S.TextGitHub>\n    </S.GoToGitHubStyle>\n      </S.LinkToGitHub>\n  );\n};\n\nexport default GoToGitHub;","import styled, { css } from \"styled-components\";\nimport { typesPlayerAresStyle } from '../../../helpers/types'\n\nexport const BoardStyle = styled.ul`\n  display: grid;\n  justify-content: center;\n  grid-template-columns: repeat(3, 100px);\n  grid-template-rows: repeat(3, 100px);\n\n  @media (max-width: 400px) {\n    grid-template-columns: repeat(3, 80px);\n    grid-template-rows: repeat(3, 80px);\n  }\n`;\n\nexport const PlayerArea = styled.li<typesPlayerAresStyle>`\n  background-color: #ffffff;\n  display: grid;\n  align-items: center;\n  justify-content: center;\n  font-size: 3rem;\n  font-weight: bold;\n  color: #00000060;\n  border: 3px solid;\n\n  cursor: pointer;\n\n  ${(props) => {\n    if (props.border === 0)\n      return css`\n        border-top: none;\n        border-left: none;\n      `;\n    if (props.border === 1)\n      return css`\n        border-top: none;\n      `;\n    if (props.border === 2)\n      return css`\n        border-top: none;\n        border-right: none;\n      `;\n    if (props.border === 3)\n      return css`\n        border-left: none;\n      `;\n    if (props.border === 5)\n      return css`\n        border-right: none;\n      `;\n    if (props.border === 6)\n      return css`\n        border-left: none;\n        border-bottom: none;\n      `;\n    if (props.border === 7)\n      return css`\n        border-bottom: none;\n      `;\n    if (props.border === 8)\n      return css`\n        border-right: none;\n        border-bottom: none;\n      `;\n  }};\n\n  ${(props) => {\n    if (props.hover === \" \")\n      return css`\n        :hover {\n          border: 4px solid;\n          box-shadow: 2px 5px 23px 7px rgba(0, 0, 0, 0.3);\n          transition: all 0.2s ease-in-out;\n          transform: scale(1.1);\n          background-color: rgba(248, 248, 255);\n        }\n      `;\n  }};\n`;\n","import React from 'react';\nimport * as S from './styles';\nimport { TypesBoard } from '../../../helpers/types'\n\nconst Board: React.FC<TypesBoard> = ({ boardCurrent, onClick }) => (\n  <S.BoardStyle>\n    {boardCurrent?.map((player: string, index: number) => (\n      <S.PlayerArea\n        key={index}\n        border={index}\n        hover={player}\n        onClick={() => onClick(index)}\n      >\n        {player}\n      </S.PlayerArea>\n    ))}\n  </S.BoardStyle>\n);\n\nexport default Board;\n","import styled, { keyframes } from \"styled-components\";\nimport { OpenDialogTypeStyle, PlayerWinnerStyle } from \"../../../helpers/types\";\nimport \"nes.css/css/nes.min.css\";\n\nconst animationDraw = keyframes`\n 40% {  transform: translateX(-35px) scale(1.1);}\n 100% {  transform: scaleX(-1) rotate(0);} \n`;\n\nconst animationWinnerCoin = keyframes`\n 0% { transform: scaleX(-1) rotate(0); }\n 40% {  transform: translateX(0) scale(0.9);  }\n 100% {  transform: scaleX(-1); } \n`;\n\nconst animationWinnerTrophy = keyframes`\n 0% { transform: scale(1.1); }\n 40% {  transform:  scale(0.8);  }\n 100% { transform: scale(1.1); }\n\n`;\n\nexport const Background = styled.div<OpenDialogTypeStyle>`\n  display: ${(props) => (props.open ? \"flex\" : \"none\")};\n\n  ::before {\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    content: \" \";\n    position: fixed;\n    background: rgba(0, 0, 0, 0.5);\n\n    z-index: 100;\n  }\n`;\n\nexport const ContainerGameDialog = styled.dialog`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  position: fixed;\n  top: 12vh;\n  box-sizing: border-box;\n  z-index: 100;\n  margin: 0 auto;\n  background-color: #ffffff;\n  padding: 20px 10px 0px 10px;\n  max-width: 360px;\n\n  @media (max-width: 500px) {\n    width: 90%;\n  }\n`;\n\nexport const TitleModal = styled.p`\n  margin: 5px;\n  font-size: 25px;\n  font-weight: bold;\n  color: #00000080;\n\n  .nes-octocat {\n    opacity: 0.7;\n  }\n`;\n\nexport const DescriptionModal = styled(TitleModal)`\n  font-size: 15px;\n  color: #00000060;\n  padding: 0 15px 10px 15px;\n`;\n\nexport const MessageWinner = styled(TitleModal)`\n  opacity: 0.7;\n  margin-bottom: 15px;\n\n  display: flex;\n  align-items: center;\n  gap: 15px;\n  flex-direction: column;\n`;\n\nexport const DrawPlayerAnimation = styled.div`\n  animation-name: ${animationDraw};\n  animation-duration: 2.5s;\n  animation-iteration-count: infinite;\n  transform: scaleX(-1);\n  transform: rotate(0);\n`;\n\nexport const WinnerCoinAnimation = styled.div`\n  animation-name: ${animationWinnerCoin};\n  animation-duration: 1.5s;\n  animation-iteration-count: infinite;\n  transform: scaleX(1);\n  transform: rotate(0);\n`;\n\nexport const WinnerTrophyAnimation = styled.div`\n  animation-name: ${animationWinnerTrophy};\n  animation-duration: 1.5s;\n  animation-iteration-count: infinite;\n  transform: scaleX(1);\n  transform: rotate(0);\n`;\n\nexport const DescriptionEndGame = styled.p<PlayerWinnerStyle>`\n  color: ${(props) => (props.winner === \"X\" ? \"red\" : \"blue\")};\n  display: flex;\n  align-items: center;\n  text-align: center;\n  justify-content: center;\n  margin: 20px;\n`;\n\nexport const ContainerBtns = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-evenly;\n  margin-bottom: 25px;\n`;\n\nexport const IconButton = styled.img`\n  margin: 2px auto;\n  width: auto;\n  height: auto;\n`;\n\nexport const GapIcons = styled.div`\n  gap: 6px;\n  display: flex;\n  align-items: center;\n`;\n\nexport const BtnStart = styled.button`\n  cursor: pointer;\n  height: auto;\n  width: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 3px;\n  min-width: 102px;\n  align-items: center;\n  font-size: 12px;\n  justify-content: space-around;\n  gap: 5px;\n  background-color: transparent;\n  min-width: 112px;\n  box-shadow: 4px 8px 9px 0px #00000070;\n\n  @media (max-width: 1024px) {\n    font-size: 0.8rem;\n    border-width: 3px;\n    padding: 4px 8px;\n  }\n  &:active {\n    opacity: 0.2;\n    cursor: wait;\n  }\n\n  &:hover {\n    border: \"1px solid #00000055\";\n    transform: scale(1.2);\n  }\n\n  &:disabled {\n    opacity: 0.4;\n    cursor: not-allowed;\n    border: \"1px solid #00000055\";\n    transform: scale(1.2);\n  }\n`;\n\nexport const BtnVsComputer = styled(BtnStart)<PlayerWinnerStyle>`\n  border: ${(props) =>\n    props.adversary === \"computer\" ? \"1px solid #00000055\" : \" \"};\n  transform: scale(${(props) => (props.adversary === \"computer\" ? 1.2 : 1)});\n  opacity: ${(props) => (props.adversary === \"computer\" ? 0.3 : \" \")};\n  transition: all 0.2s ease-in-out;\n  font-size: 8px;\n`;\n\nexport const BtnMultiPlayers = styled(BtnStart)<PlayerWinnerStyle>`\n  border: ${(props) =>\n    props.adversary === \"multiPlayers\" ? \" 1px solid #00000055\" : \" \"};\n  transform: scale(\n    ${(props) => (props.adversary === \"multiPlayers\" ? 1.2 : 1)}\n  );\n  opacity: ${(props) => (props.adversary === \"multiPlayers\" ? 0.3 : \" \")};\n  transition: all 0.2s ease-in-out;\n  font-size: 8px;\n`;\n\nexport const BtnReplay = styled(BtnStart)``;\nexport const BtnGoHome = styled(BtnStart)``;\n","import React from \"react\";\nimport * as S from \"./styles\";\nimport { typesGameDialog } from '../../../helpers/types';\nimport { ImageGlobal } from \"../../../helpers/constantes\";\n\nconst GameDialog: React.FC<typesGameDialog> = ({ game, startGame, goHome, selectComputer, selectMultiPlayers }) => {\n\n  return (\n    <S.Background open={game?.winner || game?.statusGame} >\n      <S.ContainerGameDialog>\n        {game?.statusGame === \"Home\" && (\n          <>\n            <S.TitleModal>Hello!<i className=\"nes-octocat animate\"></i> let's play?</S.TitleModal>\n            <S.DescriptionModal> choose game mode and press start </S.DescriptionModal>\n\n            <S.ContainerBtns>\n              <S.BtnVsComputer /* className=\"nes-btn\" */ aria-label=\"Button selectComputer\" type=\"button\" onClick={selectComputer} adversary={game.adversary}>\n                <S.IconButton src={ImageGlobal.VsComputerNotDescription} alt=\"IconselectComputer\" />\n                VS COMPUTER\n              </S.BtnVsComputer>\n              <S.BtnMultiPlayers /* className=\"nes-btn\" */ aria-label=\"Button selectMultiPlayers\" type=\"button\" onClick={selectMultiPlayers} adversary={game.adversary}>\n                <S.IconButton src={ImageGlobal.MultiPlayersNotDescription} alt=\"IconselectComputer\" />\n                2 PLAYERS\n              </S.BtnMultiPlayers>\n            </S.ContainerBtns>\n\n            <S.ContainerBtns>\n              <S.BtnStart /* className=\"nes-btn\" */ aria-label=\"Button StartGame\" disabled={!game.adversary} type=\"button\" onClick={startGame}>\n                {/* <S.IconButton src={ImageGlobal.StartNotDescription} alt=\"Icon StartGame\" /> */}\n                <i className=\"snes-jp-logo\"></i>\n                START\n              </S.BtnStart>\n            </S.ContainerBtns>\n          </>)}\n\n\n        {game?.statusGame === \"GameOver\" && (\n          <>\n            <S.TitleModal>End of the game</S.TitleModal>\n\n            {game?.winner === \"draw\" || game?.winner === null ? (\n              <S.MessageWinner >\n                <S.GapIcons>\n                  <S.DrawPlayerAnimation>\n                    <i className=\"nes-mario\"></i>\n                  </S.DrawPlayerAnimation>\n                  Draw!\n                </S.GapIcons>\n\n              </S.MessageWinner>\n            ) : (\n              <S.MessageWinner >\n                <S.DescriptionEndGame winner={game?.winner}>\n                  <S.WinnerTrophyAnimation>\n                    <i className=\"nes-icon trophy is-large\"></i>\n                  </S.WinnerTrophyAnimation>\n                  {game?.winner}\n                  <S.WinnerCoinAnimation>\n                    <i className=\"nes-icon coin is-large\"></i>\n                  </S.WinnerCoinAnimation>\n                </S.DescriptionEndGame>\n                is the winner!\n              </S.MessageWinner>\n            )}\n            <S.ContainerBtns >\n\n              <S.BtnReplay /* className=\"nes-btn\" */ aria-label=\"Button Replay\" type=\"button\" onClick={startGame}>\n                {/* <S.IconButton src={ImageGlobal.StartNotDescription} alt=\"Icon StartGame\" /> */}\n                <i className=\"snes-jp-logo\"></i>\n                REPLAY\n              </S.BtnReplay>\n\n              <S.BtnGoHome /* className=\"nes-btn\" */ aria-label=\"Button GoHome\" type=\"button\" onClick={goHome} >\n                <S.IconButton src={ImageGlobal.GoHomeNotDescription} alt=\"Icon StartGame\" />\n                GO HOME\n              </S.BtnGoHome>\n            </S.ContainerBtns>\n          </>)}\n\n      </S.ContainerGameDialog>\n    </S.Background>\n  );\n};\n\nexport default GameDialog;","\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport * as S from './styles'\nimport { endOfTheGame, boardDefault, onlyGameCharacters, gameCharacters } from '../../helpers/constantes';\nimport { TypesGame, TypesHash } from '../../helpers/types';\nimport Title from \"../atoms/Title\";\nimport GoToGitHub from '../atoms/GoToGitHub';\nimport Board from '../molecules/Board';\nimport GameDialog from '../organisms/GameDialog';\n\nconst Hash: React.FC<TypesHash> = ({ board, setInitialBoard }) => {\n\n  const turningBoardIntoArray = Array(1).fill(board.split(\"\"));\n  const [boardCurrent, setBoardCurrent] = useState(turningBoardIntoArray[0]);\n  const [game, setGame] = useState<TypesGame>({\n    player: \"X\",\n    statusGame: \"Home\",\n    adversary: null,\n    winner: null,\n  });\n  const historyNavigate = useNavigate();\n\n  const clearHistoryNavigate = () => {\n    historyNavigate({\n      pathname: window.location.pathname,\n      search: ``,\n    });\n  };\n\n  const LocationSearch = () => {\n    const { search } = useLocation();\n    return useMemo(() => new URLSearchParams(search), [search]);\n  };\n\n  const queryUrlParameter = LocationSearch();\n  const urlParameter: any = queryUrlParameter.get(\"board\");\n  const howManyCharactersX = !urlParameter?.match(gameCharacters.X)?.length ? 0 : urlParameter?.match(gameCharacters.X)?.length;\n  const howManyCharactersO = !urlParameter?.match(gameCharacters.O)?.length ? 0 : urlParameter?.match(gameCharacters.O)?.length;\n\n  useEffect(() => {\n    if (urlParameter) {\n\n      if (urlParameter.length !== 9) {\n        alert(\"Something wrong is not right! hehe, you typed a board with more than 9 characters\");\n        setGame({ ...game, player: \"X\", winner: null });\n        clearHistoryNavigate();\n        return setInitialBoard(boardDefault);\n      };\n\n      if (onlyGameCharacters.test(urlParameter)) {\n        alert(\"Something wrong is not right! hehe, board only accepts the following characters X space O\");\n        setGame({ ...game, player: \"X\", winner: null });\n        clearHistoryNavigate();\n        return setInitialBoard(boardDefault);\n      };\n\n      if (howManyCharactersX - howManyCharactersO >= 2 || howManyCharactersO - howManyCharactersX >= 2) {\n        alert(\"Something wrong is not right! hehe, invalid board a player cannot have more than 1 play advantage of his opponent\");\n        setGame({ ...game, player: \"X\", winner: null });\n        clearHistoryNavigate();\n        return setInitialBoard(boardDefault);\n      };\n\n      if (howManyCharactersX - howManyCharactersO === 1) setGame({ ...game, player: \"O\", winner: null });\n      if (howManyCharactersO - howManyCharactersX === 1) setGame({ ...game, player: \"X\", winner: null });\n\n      setInitialBoard(urlParameter?.toUpperCase());\n    };\n\n    if (!queryUrlParameter.get(\"board\")) {\n      setInitialBoard(boardDefault);\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [urlParameter]);\n\n  const fillTheAreaWithThePlayer = (index: number) => {\n    if (boardCurrent[index] !== \" \") return null;\n    if (game.winner) return null;\n\n    setBoardCurrent(\n      boardCurrent.map((playerArea: string, area: number) => (area === index ? game.player : playerArea))\n    );\n\n    return setGame({ ...game, player: game?.player === \"X\" ? \"O\" : \"X\" });\n  };\n\n  const validWinner = () => {\n    endOfTheGame(boardCurrent).forEach((playerAreas) => {\n      if (playerAreas.every((playerArea) => playerArea === \"O\"))\n        return setGame({ ...game, winner: \"O\", statusGame: \"GameOver\" });\n\n      if (playerAreas.every((playerArea) => playerArea === \"X\"))\n        return setGame({ ...game, winner: \"X\", statusGame: \"GameOver\" });\n    });\n  };\n\n  const validDraw = () => {\n    if (boardCurrent?.every((playerArea: string) => playerArea !== \" \"))\n      return setGame({ ...game, winner: \"draw\", statusGame: \"GameOver\" });\n  };\n\n  const computerMovementAndEndOfTheGame = useCallback(() => {\n    validDraw();\n    validWinner();\n\n    if (game?.adversary === \"computer\") {\n      if (game.player === \"O\") {\n        let emptySeatsOnBoard = [];\n        let idx = boardCurrent.indexOf(\" \");\n\n        while (idx !== -1) {\n          emptySeatsOnBoard.push(idx);\n          idx = boardCurrent.indexOf(\" \", idx + 1);\n        };\n\n        const computerRandomPosition = Math.floor(\n          Math.random() * emptySeatsOnBoard?.length\n        );\n\n        let newBoard = boardCurrent.slice();\n        newBoard[emptySeatsOnBoard[computerRandomPosition]] = \"O\";\n\n        setBoardCurrent(newBoard);\n\n        return setGame({ ...game, player: \"X\" });\n      };\n    };\n\n    historyNavigate({\n      pathname: window.location.pathname,\n      search: `?board=${encodeURIComponent(boardCurrent.join(\"\"))}`,\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [boardCurrent, game.player]);\n\n  useEffect(() => {\n\n    if (!game.statusGame) return computerMovementAndEndOfTheGame();\n    if (game.winner) {\n      computerMovementAndEndOfTheGame();\n      return clearHistoryNavigate();\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [game.statusGame, computerMovementAndEndOfTheGame, urlParameter]);\n\n  const startGame = () => {\n    setBoardCurrent(turningBoardIntoArray[0]);\n    setGame({ ...game, player: \"X\", winner: null, statusGame: null });\n  };\n\n  const goHome = () => {\n    setGame({ ...game, statusGame: \"Home\", adversary: null, winner: null, });\n  };\n\n  return (\n    <S.GameContianer>\n      <Title nameGame=\"Hash Game\" />\n\n      <Board boardCurrent={boardCurrent} onClick={fillTheAreaWithThePlayer} />\n\n      <GameDialog\n        game={game}\n        startGame={startGame}\n        goHome={goHome}\n        selectComputer={() => setGame({ ...game, adversary: \"computer\" })}\n        selectMultiPlayers={() => setGame({ ...game, adversary: \"multiPlayers\" })}\n      />\n\n      <GoToGitHub />\n    </S.GameContianer>\n  );\n}\n\nexport default React.memo(Hash);","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport './ui/helpers/globalStyle/globalStyle.css';\nimport \"nes.css/css/nes.min.css\";\nimport { boardDefault } from \"./ui/helpers/constantes\";\nimport Hash from './ui/components/templates/Hash';\n\nconst App = () => {\n  const [initialBoard, setInitialBoard] = useState(boardDefault);\n\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<Hash board={initialBoard} setInitialBoard={setInitialBoard} />} />\n        <Route path={`/react-hash/`} element={<Hash board={initialBoard} setInitialBoard={setInitialBoard} />} />\n        {/*rota /react-hash/ foi definida por causa do git, onde o projeto ta hospedado! */}\n        <Route path='*' element={<h1>URL NAO EXISTE!</h1>} />\n      </Routes>\n    </Router>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);"],"sourceRoot":""}